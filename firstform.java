/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mypackage;

import javax.swing.JOptionPane;

/**
 *
 * @author emmy0
 */
public class firstform extends javax.swing.JFrame {

    /**
     * Creates new form firstform
     */
    public firstform() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        searchFor = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        inputName = new javax.swing.JTextArea();
        rangeYearLowerBound = new javax.swing.JSpinner();
        rangeYear = new javax.swing.JCheckBox();
        rangeRatings = new javax.swing.JCheckBox();
        rangeYearUpperBound = new javax.swing.JSpinner();
        rangeRatingsLowerBound = new javax.swing.JSpinner();
        rangeRatingsUpperBound = new javax.swing.JSpinner();
        saveToFile = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        displayMainTitle = new javax.swing.JCheckBox();
        displayStartingYear = new javax.swing.JCheckBox();
        displayEndingYear = new javax.swing.JCheckBox();
        displayRatings = new javax.swing.JCheckBox();
        displayRegion = new javax.swing.JCheckBox();
        displayDuration = new javax.swing.JCheckBox();
        displayCast = new javax.swing.JCheckBox();
        rangeDuration = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        searchQuery = new javax.swing.JButton();
        rangeDurationLowerBound = new javax.swing.JSpinner();
        rangeDurationUpperBound = new javax.swing.JSpinner();
        displayMovies = new javax.swing.JCheckBox();
        displayTvShows = new javax.swing.JCheckBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        output = new javax.swing.JTextPane();
        inputLabel = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        clearChecks = new javax.swing.JButton();
        selectRegion = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        searchFor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Actor", "Director", "Movies", "Tv shows" }));
        searchFor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchForActionPerformed(evt);
            }
        });

        inputName.setColumns(20);
        inputName.setRows(5);
        inputName.setFocusCycleRoot(true);
        jScrollPane1.setViewportView(inputName);

        rangeYearLowerBound.setModel(new javax.swing.SpinnerNumberModel(1500, 1500, 2019, 1));
        rangeYearLowerBound.setEnabled(false);
        rangeYearLowerBound.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rangeYearLowerBoundStateChanged(evt);
            }
        });

        rangeYear.setText("Year");
        rangeYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rangeYearActionPerformed(evt);
            }
        });

        rangeRatings.setText("Ratings");
        rangeRatings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rangeRatingsActionPerformed(evt);
            }
        });

        rangeYearUpperBound.setModel(new javax.swing.SpinnerNumberModel(1500, 1500, 2019, 1));
        rangeYearUpperBound.setEnabled(false);
        rangeYearUpperBound.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rangeYearUpperBoundStateChanged(evt);
            }
        });

        rangeRatingsLowerBound.setModel(new javax.swing.SpinnerNumberModel(1500, 1500, 2019, 1));
        rangeRatingsLowerBound.setEnabled(false);
        rangeRatingsLowerBound.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rangeRatingsLowerBoundStateChanged(evt);
            }
        });

        rangeRatingsUpperBound.setModel(new javax.swing.SpinnerNumberModel(1500, 1500, 2019, 1));
        rangeRatingsUpperBound.setEnabled(false);
        rangeRatingsUpperBound.setPreferredSize(new java.awt.Dimension(66, 20));
        rangeRatingsUpperBound.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rangeRatingsUpperBoundStateChanged(evt);
            }
        });

        saveToFile.setText("Save to file");

        jLabel1.setText("Search For");

        jLabel2.setText("Display:");

        displayMainTitle.setText("Main Title");
        displayMainTitle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayMainTitleActionPerformed(evt);
            }
        });

        displayStartingYear.setText("Starting year");
        displayStartingYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayStartingYearActionPerformed(evt);
            }
        });

        displayEndingYear.setText("End Year");
        displayEndingYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayEndingYearActionPerformed(evt);
            }
        });

        displayRatings.setText("Ratings");

        displayRegion.setText("Region");

        displayDuration.setText("Duration");

        displayCast.setText("Cast");
        displayCast.setEnabled(false);

        rangeDuration.setText("Duration ");
        rangeDuration.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rangeDurationActionPerformed(evt);
            }
        });

        jLabel3.setText("Select Range:");
        jLabel3.setToolTipText("");

        searchQuery.setText("Search");
        searchQuery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchQueryActionPerformed(evt);
            }
        });

        rangeDurationLowerBound.setModel(new javax.swing.SpinnerNumberModel(1500, 1500, 2019, 1));
        rangeDurationLowerBound.setEnabled(false);
        rangeDurationLowerBound.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rangeDurationLowerBoundStateChanged(evt);
            }
        });

        rangeDurationUpperBound.setModel(new javax.swing.SpinnerNumberModel(1500, 1500, 2019, 1));
        rangeDurationUpperBound.setEnabled(false);
        rangeDurationUpperBound.setPreferredSize(new java.awt.Dimension(68, 20));
        rangeDurationUpperBound.setRequestFocusEnabled(false);
        rangeDurationUpperBound.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rangeDurationUpperBoundStateChanged(evt);
            }
        });

        displayMovies.setText("Movies");

        displayTvShows.setText("Tv Shows");

        output.setEditable(false);
        jScrollPane2.setViewportView(output);

        inputLabel.setText("Enter Actor Name:");

        jLabel4.setText("Output:");

        clearChecks.setText("Clear Selection");
        clearChecks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearChecksActionPerformed(evt);
            }
        });

        selectRegion.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Any", "US", "MX", "FR" }));
        selectRegion.setToolTipText("Select Region");
        selectRegion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectRegionActionPerformed(evt);
            }
        });

        jLabel6.setText("Region:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 539, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(searchQuery, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(saveToFile, javax.swing.GroupLayout.DEFAULT_SIZE, 103, Short.MAX_VALUE))
                        .addGap(0, 48, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(23, 23, 23)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(displayMainTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(displayCast, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(displayRatings, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(displayDuration, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(displayRegion, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(displayStartingYear))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(displayMovies, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(displayTvShows, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(displayEndingYear, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(clearChecks))))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(searchFor, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 307, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addComponent(inputLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(36, 36, 36)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(selectRegion, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                            .addComponent(rangeDuration, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(rangeDurationLowerBound, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(rangeYear, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(rangeRatings))
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(rangeRatingsLowerBound)
                                                .addComponent(rangeYearLowerBound)))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(rangeYearUpperBound, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(rangeRatingsUpperBound, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(rangeDurationUpperBound, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE)))))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchFor, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addComponent(inputLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rangeYear)
                            .addComponent(rangeYearLowerBound, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(rangeYearUpperBound, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rangeRatings)
                            .addComponent(rangeRatingsLowerBound, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(rangeRatingsUpperBound, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(rangeDurationLowerBound, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(rangeDurationUpperBound, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(rangeDuration))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel6)
                        .addComponent(selectRegion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jLabel5)))
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(displayMainTitle)
                    .addComponent(displayCast)
                    .addComponent(displayDuration)
                    .addComponent(displayRegion)
                    .addComponent(displayStartingYear)
                    .addComponent(displayEndingYear)
                    .addComponent(displayRatings))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(displayMovies)
                        .addComponent(displayTvShows))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(clearChecks)))
                .addGap(8, 8, 8)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(searchQuery)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(saveToFile))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(459, Short.MAX_VALUE))
        );

        rangeDurationLowerBound.getAccessibleContext().setAccessibleDescription("Lower Bound");
        rangeDurationUpperBound.getAccessibleContext().setAccessibleDescription("Upper Bound");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void searchForActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchForActionPerformed
        // TODO add your handling code here:
        String itemSelected = searchFor.getSelectedItem()+"";
        
        if(itemSelected.equals("Tv shows")){//Movies, Tv shows, Actor, Director
             inputName.setEnabled(false);
             displayMovies.setEnabled(false);
             displayTvShows.setEnabled(false);
             inputLabel.setText("");
        }else if(itemSelected.equals("Movies")){
            inputName.setEnabled(false);
            displayMovies.setEnabled(false);
             displayTvShows.setEnabled(false);
             inputLabel.setText("");
        }else if(itemSelected.equals("Actor")){
            inputName.setEnabled(true);
            displayMovies.setEnabled(true);
             displayTvShows.setEnabled(true);
             inputLabel.setText("Enter Actor Name:");
        }else if(itemSelected.equals("Director")){
            inputName.setEnabled(true);
            displayMovies.setEnabled(true);
             displayTvShows.setEnabled(true);
            inputLabel.setText("Enter Director Name:");
        }
    }//GEN-LAST:event_searchForActionPerformed

    private void rangeYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rangeYearActionPerformed
        // TODO add your handling code here:
        if(rangeYear.isSelected()){
            rangeYearLowerBound.setEnabled(true);
            rangeYearUpperBound.setEnabled(true);
        }else{
            rangeYearLowerBound.setEnabled(false);
            rangeYearUpperBound.setEnabled(false);
        }
    }//GEN-LAST:event_rangeYearActionPerformed

    private void displayMainTitleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayMainTitleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_displayMainTitleActionPerformed

    private void displayStartingYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayStartingYearActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_displayStartingYearActionPerformed

    private void displayEndingYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayEndingYearActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_displayEndingYearActionPerformed

    private void rangeRatingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rangeRatingsActionPerformed
        // TODO add your handling code here:
        if(rangeRatings.isSelected()){
            rangeRatingsLowerBound.setEnabled(true);
            rangeRatingsUpperBound.setEnabled(true);
        }else{
            rangeRatingsLowerBound.setEnabled(false);
            rangeRatingsUpperBound.setEnabled(false);
        }
    }//GEN-LAST:event_rangeRatingsActionPerformed

    private void rangeDurationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rangeDurationActionPerformed
        // TODO add your handling code here:
        if(rangeDuration.isSelected()){
            rangeDurationLowerBound.setEnabled(true);
            rangeDurationUpperBound.setEnabled(true);
        }else{
            rangeDurationLowerBound.setEnabled(false);
            rangeDurationUpperBound.setEnabled(false);
        }
    }//GEN-LAST:event_rangeDurationActionPerformed

    private void searchQueryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchQueryActionPerformed
        // TODO add your handling code here:
        String getFromSQL = "SELECT";;
        String innerJoinLocation = "";
        String rangeLocation = " WHERE";
        boolean somethingSelected = false;
        boolean innerJoin = false;
        boolean range = false;
        
        output.setText("");
        
        //chooses what to display
        if(displayMainTitle.isSelected()){
            getFromSQL = getFromSQL + " titlebasics.primaryTitle";
            somethingSelected = true;
        }
        
        if(displayRatings.isSelected() || rangeRatings.isSelected()){
            if(somethingSelected){
                getFromSQL = getFromSQL + ",";
            }
            getFromSQL = getFromSQL + " ratings.averageRating";
            somethingSelected = true;
            innerJoin = true;
            innerJoinLocation = innerJoinLocation + " INNER JOIN ratings ON titlebasics.tconst = ratings.tconst";
        }
        
        if(searchFor.equals("Actor")){
            innerJoinLocation = innerJoinLocation + " INNER JOIN namebasics ON namebasics.knownforTitles = titlebasics.tconst";
        }else if(searchFor.equals("Director")){
            innerJoinLocation = innerJoinLocation + "INNER JOIN titlebasics ON titlebasics.tconst = crew.tconst";
        }
        
        if(displayDuration.isSelected()){
            if(somethingSelected){
                getFromSQL = getFromSQL + ",";
            }
            getFromSQL = getFromSQL + " titlebasics.runtimeMinutes";
            somethingSelected = true;
        }
        
        if(displayRegion.isSelected()){
            if(somethingSelected){
                getFromSQL = getFromSQL + ",";
            }
            getFromSQL = getFromSQL + " akas.region";
            somethingSelected = true;
            innerJoin = true;
            innerJoinLocation = innerJoinLocation + " INNER JOIN akas ON titlebasics.tconst = akas.titleID";
        }
        
        
        
        if(displayStartingYear.isSelected()){
            if(somethingSelected){
                getFromSQL = getFromSQL + ",";
            }
            getFromSQL = getFromSQL + " titlebasics.startYear";
            somethingSelected = true;
        }
        
        if(displayEndingYear.isSelected()){
            if(somethingSelected){
                getFromSQL = getFromSQL + ",";
            }
            getFromSQL = getFromSQL + " titlebasics.endYear";
            somethingSelected = true;
        }
        
        if(!somethingSelected){
            getFromSQL = getFromSQL + " *";
        }
        
        getFromSQL = getFromSQL + " FROM titlebasics";
        
        //INNER JOIN ON
        if(innerJoin){
            getFromSQL = getFromSQL + innerJoinLocation;
        }
        
        //WHERE
        if(rangeYear.isSelected()){
            range = true;
            
            if((Integer)rangeYearLowerBound.getValue() < (Integer)rangeYearUpperBound.getValue()){
                rangeLocation = rangeLocation +" titlebasics.startYear > " + (Integer)rangeYearLowerBound.getValue() + " AND titlebasics.endYear < " + (Integer)rangeYearUpperBound.getValue();   
            }else{
                rangeLocation = rangeLocation +" titlebasics.startYear = " + (Integer)rangeYearLowerBound.getValue();
            }
            
        }
        
        if(rangeRatings.isSelected()){
            
            if(range){
                rangeLocation = rangeLocation + " AND";
            }
            
            if((Integer)rangeRatingsLowerBound.getValue() < (Integer)rangeRatingsUpperBound.getValue()){
                rangeLocation = rangeLocation +" ratings.averageRating > " + (Integer)rangeRatingsLowerBound.getValue() + " AND ratings.averageRating < " + (Integer)rangeRatingsUpperBound.getValue();   
            }else{
                rangeLocation = rangeLocation +" ratings.averageRating = " + (Integer)rangeRatingsLowerBound.getValue();
            }
            range = true;
        }
        
        if(rangeDuration.isSelected()){
            
            if(range){
                rangeLocation = rangeLocation + " AND";
            }
            
            if((Integer)rangeDurationLowerBound.getValue() < (Integer)rangeDurationUpperBound.getValue()){
                rangeLocation = rangeLocation +" titlebasics.runtimeMinutes > " + (Integer)rangeDurationLowerBound.getValue() + " AND titlebasics.runtimeMinutes < " + (Integer)rangeDurationUpperBound.getValue();   
            }else{
                rangeLocation = rangeLocation +" titlebasics.runtimeMinutes = " + (Integer)rangeDurationLowerBound.getValue();
            }
            range = true;
        }
        String s = selectRegion.getSelectedItem()+"";
        if(!s.equals("Any")){
            if(range){
                rangeLocation = rangeLocation + " AND";
            }
            
            rangeLocation = rangeLocation + " akas.region = " + (String)selectRegion.getSelectedItem();
            
            range = true;
        }
        
        String itemSelected = searchFor.getSelectedItem()+"";
        
        if(itemSelected.equals("Tv shows")){//Movies, Tv shows, Actor, Director
            if(range){
                rangeLocation = rangeLocation + " AND";
            }
            
            rangeLocation = rangeLocation + " titlebasics.titleType = 'tvEpisode'";
             
            range = true;
        }else if(itemSelected.equals("Movies")){
            if(range){
                rangeLocation = rangeLocation + " AND";
            }
            
            rangeLocation = rangeLocation + " titlebasics.titleType = 'movie'";
             
            range = true;
        }else if(itemSelected.equals("Actor")){
            if(range){
                rangeLocation = rangeLocation + " AND";
            }
            
            rangeLocation = rangeLocation + " namebasics.primaryName = '" + inputName.getText() + "'";
            
            if(displayMovies.isSelected()){
                rangeLocation = rangeLocation + " AND titlebasics.titleType = 'movie'";
            }
            
            if(displayTvShows.isSelected()){
               rangeLocation = rangeLocation + " AND titlebasics.titleType = 'tvEpisode'";
            }
             
            range = true;
        }else if(itemSelected.equals("Director")){
            if(range){
                rangeLocation = rangeLocation + " AND";
            }
            
            rangeLocation = rangeLocation + " namebasics.primaryName = '" + inputName.getText() + "'";
             
            if(displayMovies.isSelected()){
                rangeLocation = rangeLocation + " AND titlebasics.titleType = 'movie'";
            }
            
            if(displayTvShows.isSelected()){
               rangeLocation = rangeLocation + " AND titlebasics.titleType = 'tvEpisode'";
            }
            
            range = true; 
        }
        
        if(range){
            getFromSQL = getFromSQL + rangeLocation;
        }
        
        getFromSQL = getFromSQL + ";";
        output.setText(getFromSQL);
        
        
        
        
    }//GEN-LAST:event_searchQueryActionPerformed

    private void clearChecksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearChecksActionPerformed
        // TODO add your handling code here:
        displayMainTitle.setSelected(false);
        displayCast.setSelected(false);
        displayRatings.setSelected(false);
        displayDuration.setSelected(false);
        displayRegion.setSelected(false);
        displayStartingYear.setSelected(false);
        displayEndingYear.setSelected(false);
        displayMovies.setSelected(false);
        displayTvShows.setSelected(false);
        rangeYear.setSelected(false);
        rangeRatings.setSelected(false);
        rangeDuration.setSelected(false);
        selectRegion.setSelectedIndex(0);
        rangeYearLowerBound.setEnabled(false);
        rangeYearUpperBound.setEnabled(false);
        rangeRatingsLowerBound.setEnabled(false);
        rangeRatingsUpperBound.setEnabled(false);
        rangeDurationLowerBound.setEnabled(false);
        rangeDurationUpperBound.setEnabled(false);
    }//GEN-LAST:event_clearChecksActionPerformed

    private void rangeYearLowerBoundStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rangeYearLowerBoundStateChanged
        // TODO add your handling code here:

        if((Integer)rangeYearLowerBound.getValue() > (Integer)rangeYearUpperBound.getValue()){
            rangeYearUpperBound.setValue(rangeYearLowerBound.getValue());
        }
    }//GEN-LAST:event_rangeYearLowerBoundStateChanged

    private void rangeRatingsLowerBoundStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rangeRatingsLowerBoundStateChanged
        // TODO add your handling code here:
        if((Integer)rangeRatingsLowerBound.getValue() > (Integer)rangeRatingsUpperBound.getValue()){
            rangeRatingsUpperBound.setValue(rangeRatingsLowerBound.getValue());
        }
    }//GEN-LAST:event_rangeRatingsLowerBoundStateChanged

    private void rangeDurationLowerBoundStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rangeDurationLowerBoundStateChanged
        // TODO add your handling code here:
        if((Integer)rangeDurationLowerBound.getValue() > (Integer)rangeDurationUpperBound.getValue()){
            rangeDurationUpperBound.setValue(rangeDurationLowerBound.getValue());
        }
    }//GEN-LAST:event_rangeDurationLowerBoundStateChanged

    private void rangeYearUpperBoundStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rangeYearUpperBoundStateChanged
        // TODO add your handling code here:
        if((Integer)rangeYearLowerBound.getValue() > (Integer)rangeYearUpperBound.getValue()){
            rangeYearLowerBound.setValue(rangeYearUpperBound.getValue());
        }
    }//GEN-LAST:event_rangeYearUpperBoundStateChanged

    private void rangeRatingsUpperBoundStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rangeRatingsUpperBoundStateChanged
        // TODO add your handling code here:
        if((Integer)rangeRatingsLowerBound.getValue() > (Integer)rangeRatingsUpperBound.getValue()){
            rangeRatingsLowerBound.setValue(rangeRatingsUpperBound.getValue());
        }
    }//GEN-LAST:event_rangeRatingsUpperBoundStateChanged

    private void rangeDurationUpperBoundStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rangeDurationUpperBoundStateChanged
        // TODO add your handling code here:
        if((Integer)rangeDurationLowerBound.getValue() > (Integer)rangeDurationUpperBound.getValue()){
            rangeDurationLowerBound.setValue(rangeDurationUpperBound.getValue());
        }
    }//GEN-LAST:event_rangeDurationUpperBoundStateChanged

    private void selectRegionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectRegionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_selectRegionActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(firstform.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(firstform.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(firstform.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(firstform.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new firstform().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clearChecks;
    private javax.swing.JCheckBox displayCast;
    private javax.swing.JCheckBox displayDuration;
    private javax.swing.JCheckBox displayEndingYear;
    private javax.swing.JCheckBox displayMainTitle;
    private javax.swing.JCheckBox displayMovies;
    private javax.swing.JCheckBox displayRatings;
    private javax.swing.JCheckBox displayRegion;
    private javax.swing.JCheckBox displayStartingYear;
    private javax.swing.JCheckBox displayTvShows;
    private javax.swing.JLabel inputLabel;
    private javax.swing.JTextArea inputName;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextPane output;
    private javax.swing.JCheckBox rangeDuration;
    private javax.swing.JSpinner rangeDurationLowerBound;
    private javax.swing.JSpinner rangeDurationUpperBound;
    private javax.swing.JCheckBox rangeRatings;
    private javax.swing.JSpinner rangeRatingsLowerBound;
    private javax.swing.JSpinner rangeRatingsUpperBound;
    private javax.swing.JCheckBox rangeYear;
    private javax.swing.JSpinner rangeYearLowerBound;
    private javax.swing.JSpinner rangeYearUpperBound;
    private javax.swing.JButton saveToFile;
    private javax.swing.JComboBox<String> searchFor;
    private javax.swing.JButton searchQuery;
    private javax.swing.JComboBox<String> selectRegion;
    // End of variables declaration//GEN-END:variables
}
